// Code generated by go generate. DO NOT EDIT.
//
// Run the following command to generate this file:
// 		go run ./cmd/authelia-gen locales
//

import i18n from "i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import Backend from "i18next-http-backend";
import { initReactI18next } from "react-i18next";

import LocalStorageCustomDetector from "@i18n/detectors/localStorageCustom";
import { getBasePath } from "@utils/BasePath";

const basePath = getBasePath();

const CustomLanguageDetector = new LanguageDetector();

CustomLanguageDetector.addDetector(LocalStorageCustomDetector);

i18n.use(Backend)
    .use(CustomLanguageDetector)
    .use(initReactI18next)
    .init({
        detection: {
            order: ["querystring", "localStorageCustom", "navigator"],
            lookupQuerystring: "lng",
            lookupLocalStorage: "lng",
        },
        backend: {
            loadPath: basePath + "/locales/{{lng}}/{{ns}}.json",
        },
        load: "all",
        ns: ["portal"],
        defaultNS: "portal",
        fallbackLng: {
            default: ["en"],
            ar: ["en"],
            "ar-SA": ["ar", "en"],
            cs: ["en"],
            "cs-CZ": ["cs", "en"],
            da: ["en"],
            "da-DK": ["da", "en"],
            de: ["en"],
            el: ["en"],
            "el-GR": ["el", "en"],
            es: ["en"],
            fi: ["en"],
            fr: ["en"],
            hu: ["en"],
            it: ["en"],
            ja: ["en"],
            "ja-JP": ["ja", "en"],
            nb: ["en"],
            "nb-NO": ["nb", "en"],
            nl: ["en"],
            no: ["en"],
            pl: ["en"],
            pt: ["en"],
            "pt-BR": ["en"],
            ro: ["en"],
            ru: ["en"],
            sl: ["en"],
            "sl-SI": ["sl", "en"],
            sv: ["en"],
            "sv-SE": ["sv", "en"],
            uk: ["en"],
            "uk-UA": ["uk", "en"],
            zh: ["en"],
            "zh-CN": ["zh", "en"],
            "zh-TW": ["en"],
        },
        supportedLngs: [
            "en",
            "ar",
            "ar-SA",
            "cs",
            "cs-CZ",
            "da",
            "da-DK",
            "de",
            "el",
            "el-GR",
            "es",
            "fi",
            "fr",
            "hu",
            "it",
            "ja",
            "ja-JP",
            "nb",
            "nb-NO",
            "nl",
            "no",
            "pl",
            "pt",
            "pt-BR",
            "ro",
            "ru",
            "sl",
            "sl-SI",
            "sv",
            "sv-SE",
            "uk",
            "uk-UA",
            "zh",
            "zh-CN",
            "zh-TW",
        ],
        lowerCaseLng: false,
        nonExplicitSupportedLngs: true,
        interpolation: {
            escapeValue: false,
        },
        debug: false,
    });

export default i18n;

export const supportedLngsNames = [
    { lng: "en", name: "English" },
    { lng: "ar", name: "Arabic" },
    { lng: "ar-SA", name: "Arabic (Saudi Arabia)" },
    { lng: "cs", name: "Czech" },
    { lng: "cs-CZ", name: "Czech (Czechia)" },
    { lng: "da", name: "Danish" },
    { lng: "da-DK", name: "Danish (Denmark)" },
    { lng: "de", name: "German" },
    { lng: "el", name: "Greek" },
    { lng: "el-GR", name: "Greek (Greece)" },
    { lng: "es", name: "Spanish" },
    { lng: "fi", name: "Finnish" },
    { lng: "fr", name: "French" },
    { lng: "hu", name: "Hungarian" },
    { lng: "it", name: "Italian" },
    { lng: "ja", name: "Japanese" },
    { lng: "ja-JP", name: "Japanese (Japan)" },
    { lng: "nb", name: "Norwegian Bokmål" },
    { lng: "nb-NO", name: "Norwegian Bokmål (Norway)" },
    { lng: "nl", name: "Dutch" },
    { lng: "no", name: "Norwegian Bokmål" },
    { lng: "pl", name: "Polish" },
    { lng: "pt", name: "Portuguese" },
    { lng: "pt-BR", name: "Brazilian Portuguese" },
    { lng: "ro", name: "Romanian" },
    { lng: "ru", name: "Russian" },
    { lng: "sl", name: "Slovenian" },
    { lng: "sl-SI", name: "Slovenian (Slovenia)" },
    { lng: "sv", name: "Swedish" },
    { lng: "sv-SE", name: "Swedish (Sweden)" },
    { lng: "uk", name: "Ukrainian" },
    { lng: "uk-UA", name: "Ukrainian (Ukraine)" },
    { lng: "zh", name: "Chinese" },
    { lng: "zh-CN", name: "Chinese (China)" },
    { lng: "zh-TW", name: "Chinese (Taiwan)" },
];
